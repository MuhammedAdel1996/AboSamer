// <auto-generated />
using System;
using DataAccessLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(TechnicalContext))]
    [Migration("20210212123309_step1")]
    partial class step1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataAccessLayer.Model.Customer", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("address");

                    b.Property<int>("count");

                    b.Property<string>("field");

                    b.Property<long?>("hours");

                    b.Property<string>("name");

                    b.Property<int>("ownerid");

                    b.Property<int>("sectorid");

                    b.HasKey("id");

                    b.HasIndex("ownerid");

                    b.HasIndex("sectorid");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Employee", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("customerid");

                    b.Property<string>("email");

                    b.Property<string>("jobtitle");

                    b.Property<string>("name");

                    b.HasKey("id");

                    b.HasIndex("customerid");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("DataAccessLayer.Model.FollowUp", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("create");

                    b.Property<int>("customerid");

                    b.Property<string>("discribtion");

                    b.Property<bool>("followup");

                    b.Property<bool>("order");

                    b.Property<int>("ownerid");

                    b.HasKey("id");

                    b.HasIndex("customerid");

                    b.HasIndex("ownerid");

                    b.ToTable("FollowUp");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Order", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("count");

                    b.Property<DateTime>("create");

                    b.Property<int>("customerid");

                    b.Property<string>("description");

                    b.Property<int?>("ownerid");

                    b.Property<string>("result");

                    b.HasKey("id");

                    b.HasIndex("customerid");

                    b.HasIndex("ownerid");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Phones", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("objectid");

                    b.Property<string>("objectname");

                    b.Property<string>("phone");

                    b.HasKey("id");

                    b.ToTable("Phones");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Roles", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RoleName")
                        .IsRequired();

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Sector", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("id");

                    b.ToTable("Sector");
                });

            modelBuilder.Entity("DataAccessLayer.Model.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("LastAccess");

                    b.Property<string>("ObjectId");

                    b.Property<string>("ObjectName");

                    b.Property<string>("Password");

                    b.Property<int>("RoleId");

                    b.Property<string>("UserName")
                        .IsRequired();

                    b.Property<bool>("active");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DataAccessLayer.RefreshToken", b =>
                {
                    b.Property<string>("RefreshTokenId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("ClientActive");

                    b.Property<string>("ClientAllowedOrigin");

                    b.Property<bool?>("ClientApplicationType");

                    b.Property<string>("ClientId");

                    b.Property<string>("ClientName");

                    b.Property<int?>("ClientRefreshTokenLifeTime");

                    b.Property<string>("ClientSecret");

                    b.Property<bool?>("IsRefreshTokenDeleted");

                    b.Property<bool>("IsUserBlocked");

                    b.Property<bool>("IsUserDeleted");

                    b.Property<bool>("IsUserReported");

                    b.Property<DateTime>("RefreshTokenExpiresUtc");

                    b.Property<DateTime>("RefreshTokenIssuedUtc");

                    b.Property<string>("RefreshTokenSubject");

                    b.Property<string>("UserEmail");

                    b.Property<long>("UserId");

                    b.Property<string>("UserName");

                    b.Property<string>("UserPhone");

                    b.HasKey("RefreshTokenId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Customer", b =>
                {
                    b.HasOne("DataAccessLayer.Model.User", "User")
                        .WithMany("Customers")
                        .HasForeignKey("ownerid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccessLayer.Model.Sector", "Sector")
                        .WithMany("Customers")
                        .HasForeignKey("sectorid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccessLayer.Model.Employee", b =>
                {
                    b.HasOne("DataAccessLayer.Model.Customer", "Customer")
                        .WithMany("Employees")
                        .HasForeignKey("customerid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccessLayer.Model.FollowUp", b =>
                {
                    b.HasOne("DataAccessLayer.Model.Customer", "Customer")
                        .WithMany("FollowUps")
                        .HasForeignKey("customerid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccessLayer.Model.User", "User")
                        .WithMany("FollowUps")
                        .HasForeignKey("ownerid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccessLayer.Model.Order", b =>
                {
                    b.HasOne("DataAccessLayer.Model.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("customerid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccessLayer.Model.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("ownerid");
                });

            modelBuilder.Entity("DataAccessLayer.Model.User", b =>
                {
                    b.HasOne("DataAccessLayer.Model.Roles", "Roles")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
